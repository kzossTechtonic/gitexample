
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - ConGra Test</title>
  
  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css">

  
      <style>
      @font-face {
  font-family: 'Thasadith';
  font-style: normal;
  font-weight: 400;
  src: local('Thasadith Regular'), local('Thasadith-Regular'), url(https://fonts.gstatic.com/s/thasadith/v2/mtG44_1TIqPYrd_f5R1ot0MQ.ttf) format('truetype');
}
body {
  min-height: 100vh;
  font-family: thasadith, sans-serif;
}
.title {
  opacity: 0.8;
  padding: 3vmin;
}
.desc {
  opacity: 0.8;
  font-size: smaller;
  padding: 0 3vmin;
}
canvas {
  display: block;
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: -1;
}
#elCheckerboard {
  position: absolute;
  top: 50%;
  left: 50%;
  z-index: 1;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  box-shadow: 0 0 3px -1px rgba(0, 0, 0, 0.7);
  -webkit-animation: sc 2s forwards;
          animation: sc 2s forwards;
}
@-webkit-keyframes sc {
  from {
    width: 50vmin;
    height: 50vmin;
  }
  to {
    width: 60vmin;
    height: 60vmin;
  }
}
@keyframes sc {
  from {
    width: 50vmin;
    height: 50vmin;
  }
  to {
    width: 60vmin;
    height: 60vmin;
  }
}
#elColorWheel {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50% 50%;
  -webkit-mask: radial-gradient(transparent 20%, #000 20%);
          mask: radial-gradient(transparent 20%, #000 20%);
  -webkit-animation: ro 3s;
          animation: ro 3s;
}
@-webkit-keyframes ro {
  from {
    -webkit-transform: rotate(120deg);
            transform: rotate(120deg);
  }
  to {
    -webkit-transform: rotate(0);
            transform: rotate(0);
  }
}
@keyframes ro {
  from {
    -webkit-transform: rotate(120deg);
            transform: rotate(120deg);
  }
  to {
    -webkit-transform: rotate(0);
            transform: rotate(0);
  }
}

    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

  
    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  
<div class="title">ConGra, Conic Gradient WebGL Polyfill</div>
<div class="desc">Test :: angle, position, repeating, stacking, animation</div>
<div id="elCheckerboard"> 
  <div id="elColorWheel"> </div>
</div>
    <script src="//static.codepen.io/assets/common/stopExecutionOnTimeout-de7e2ef6bfefd24b79a3f68b414b87b8db5b08439cac3f1012092b2290c719cd.js"></script>

  <script src='https://cdn.jsdelivr.net/npm/twgl.js@4.5.2/dist/4.x/twgl-full.min.js'></script>

  

    <script >
      console.clear();
// wgl conic, pre-rel @2019/1/5 by ycw
const ConGra=function(){function o({width:o,height:t,gl:n}){let s=n?n.canvas:document.createElement("canvas");return s.width=o,s.height=t,s.getContext("webgl",{premultipliedAlpha:!1})}return function({width:t,height:n,maxStops:s,twgl:e}){let a=o({width:t,height:n});const i=function({maxStops:o=4}){const t=[];for(const n of Array(o).keys())0!=n&&t.push(`\n    else if (stopOffsets[${n}] >= ang) {\n      float ratio = (ang - stopOffsets[${n-1}])/(stopOffsets[${n}] - stopOffsets[${n-1}]);\n      gl_FragColor = mix(stopColors[${n-1}], stopColors[${n}], ratio);\n    }`);return`precision lowp float;\n    const float PI = ${Math.PI};\n    uniform vec2 resolution;\n    uniform vec2 position;\n    uniform vec4 stopColors[${o}];\n    uniform float stopOffsets[${o}];\n    uniform bool isRepeat;\n    uniform float lastStopOffset;\n    uniform float angle; // offset of start angle; cw\n    \n    void main() {\n      vec2 v = position - gl_FragCoord.xy / resolution;\n      float ang = atan(\n          1.0 - gl_FragCoord.y/resolution.y - position.y,\n          gl_FragCoord.x / resolution.x - position.x\n          );\n      ang += PI / 2.0;\n      if (ang < 0.0) { \n        ang = PI * 2.0 + ang;\n      }\n      ang = ang / (PI * 2.0); // in turn space (ie. 0..1)\n      ang = fract(-angle + ang);\n      if (isRepeat) {\n        ang = mod(ang, lastStopOffset);\n      }\n        \n      if (stopOffsets[0] >= ang) {\n        gl_FragColor = stopColors[0];\n      }\n      ${t.join("")}\n    }`}({maxStops:s});let r=null,f=null;const l=new WeakMap,p=({width:t,height:n})=>{a=o({width:t,height:n,gl:a}),r=e.createProgramInfo(a,["attribute vec2 aPosition; void main() { gl_Position = vec4(aPosition, 0.0, 1.0); }\n",i]),f=e.createBufferInfoFromArrays(a,{aPosition:{numComponents:2,data:[-1,-1,-1,1,1,1,1,-1]}})};p({width:t,height:n});return{get gl(){return a},maxStops:s,render:o=>{const t=[a.canvas.width,a.canvas.height],n=[];for(const[t,e]of o.entries()){const{angle:o,position:a,stops:i,isRepeat:r}=e,f=r?i.length:1==i[i.length-1].offset?i.length:i.length+1;if(f>s)throw new Error(`gradients[${t}] has ${f} color stops (max=${s})`);let p=[],g=[];if(l.has(i)){const o=l.get(i);p=o.stopOffsets,g=o.stopColors}else{for(const{offset:o,color:t}of i)g.push(...t),p.push(o);const o=i[i.length-1].color;for(const t of Array(s-f).keys())p.push(1),g.push(...o);l.set(i,{stopOffsets:p,stopColors:g})}n.push({angle:o||0,position:a||[.5,.5],stopOffsets:p,stopColors:g,isRepeat:Boolean(r),desiredStopCount:f})}a.viewport(0,0,a.canvas.width,a.canvas.height),a.clear(a.COLOR_BUFFER_BIT),a.enable(a.BLEND),a.blendFunc(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA),a.useProgram(r.program),e.setBuffersAndAttributes(a,r,f);for(const{angle:o,position:s,stopColors:i,stopOffsets:l,isRepeat:p,desiredStopCount:g}of n)e.setUniforms(r,{resolution:t,angle:o,position:s,stopColors:i,stopOffsets:l,isRepeat:p,lastStopOffset:l[g-1]}),e.drawBufferInfo(a,f,a.TRIANGLE_FAN)},resize:p,toURL:({mimeType:o,quality:t}={})=>a.canvas.toBlob?function({canvas:o,mimeType:t,quality:n}){return new Promise((s,e)=>{o.toBlob(o=>{o?s(URL.createObjectURL(o)):e(new Error("canvas is either 0 width or 0 height"))},t,n)})}({canvas:a.canvas,mimeType:o,quality:t}):function({canvas:o,mimeType:t,quality:n}){return Promise.resolve(o.toDataURL(t,n))}({canvas:a.canvas,mimeType:o,quality:t})}}}();


//
// usage1: directly canvas manipulation; e.g. animation
//
const cg = ConGra({width:innerWidth, height:innerHeight, maxStops:8, twgl});
document.body.appendChild(cg.gl.canvas);
const N_GRADIENTS = 4;
const gradients = [];
for (const i of Array(N_GRADIENTS).keys()) {
  const gradient = {};
  gradient.angle = -0.5 + Math.random();
  gradient.position = [0.5, 0.5];
  gradient.stops = [
    {offset:30/360, color: [1,1,1,0.2]},
    {offset:60/360, color: [0,0,0,0.2]},
  ];
  gradient.isRepeat = true;
  gradient.$av = (Math.random() > 0.5 ? 1 : -1) * 10/360;
  gradients.push(gradient);
}

let t0;
function f(t) {
  requestAnimationFrame(f);
  const dt = (t - t0)/1e3;
  t0 = t;
  for(const gradient of gradients) {
    gradient.angle += dt * gradient.$av;
  }
  cg.render(gradients);
}

requestAnimationFrame(t => {
  requestAnimationFrame(f);
  t0 = t;
});

onresize = e => {
  //cg.resize({width:innerWidth, height:innerHeight});
};

//
// usage2: static background creation; e.g. use as `background-image`
// currently, it supports 
// - angle: float # offset gradient by angle in turn (ie. 0..1); cw
// - position: float[2] # setting gradient's origin
// - isRepeat: bool # as if `repeating-radial-gradient`
//
{
  const {width, height} = elCheckerboard.getBoundingClientRect();
  const cg = ConGra({
    width:width/10, // The smaller buffer, the faster rendering;
    height:height/10, 
    maxStops:3, // Fshader supports <maxStops> color stops;
                // ConGra will auto check if given gradients exceeded <maxStops>
                // when `.render(..)` is called. If true, it'll throw.
    twgl // inject twgl, see http://twgljs.org
  });
  // Now, we'll render one gradient into a "1/10-scaled" canvas
  // (acutally, ConGra supports render 1+ gradients by one `render([..])`)
  // gradient setup:
  //   +--------+--------+
  //   |        |        |
  //   | repeat | black  |
  //   |        |        |
  //   +--------+--------+
  //   |        |        |
  //   | repeat | white  |
  //   |        |        |
  //   +--------+--------+
  // Note, there are only 4 "squares" in canvas, 
  // tiling behavior will be done by `background-repeat` in css.
  cg.render([{
    angle: 0.0, // default=0
    position: [0.5, 0.5], // default=[0.5, 0.5]
    isRepeat:true, // default=false
    stops: [
      { offset:0.25, color:[0, 0, 0, 0.9] }, // 0-90deg black
      { offset:0.25, color:[1, 1, 1, 0.6] }, // 90-180deg white
      { offset:0.50, color:[1, 1, 1, 0.1] }
    ]
  }]);
  
  // Dump internal canvas to image url
  // ConGra auto-detects if browser supports 'toBlob', otherwise 'toDataURL'(Edge)
  // `toURL` returns Promise{} (even if `toDataURL` is chosen)
  cg.toURL()
    .then(url => elCheckerboard.style.background = `url(${url}) repeat`);
}

//
// usage2.a 
// e.g. 240deg color wheel
//
{
  const {width, height} = elColorWheel.getBoundingClientRect();
  const cg = ConGra({width, height, maxStops:8, twgl});
  const scale = 240/360;
  cg.render([{
    angle:0.0,
    position:[0.5, 0.5],
    isRepeat:false,
    stops: [
      {offset:0/360   * scale, color:[1,0,0,0.7]}, // red
      {offset:60/360  * scale, color:[1,1,0,0.7]}, // yellow 
      {offset:120/360 * scale, color:[0,1,0,0.7]}, // green
      {offset:180/360 * scale, color:[0,1,1,0.7]}, // cyan
      {offset:240/360 * scale, color:[0,0,1,0.7]}, // blue
      {offset:320/360 * scale, color:[1,0,1,0.7]}, // meganta
      {offset:360/360 * scale, color:[1,0,0,0.7]}, // red
    ]
  }]);
  cg.toURL().then(url => elColorWheel.style.background = `100% 100%/cover url(${url}) no-repeat`)
}
      //# sourceURL=pen.js
    </script>



    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
