
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - Flexbox.io Solutions</title>
  
  
  
  
      <style>
      /* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box, .box-fd, .box-wrap, .box-or, .box-ctr {
  color:white;
  font-size: 100px;
  text-align: center;
  text-shadow:4px 4px 0 rgba(0,0,0,0.1);
  padding:10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2, .box2-ctr { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6, .box6-ctr { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9, .box9-ctr { background:#2ecc71;}
.box10 { background:#16a085;}

/*defaults*/
body {
  background-color: lightpink;
}

h1, h2{
  padding-left: 20px;
  color: #2e2e2e;
}

/*******************************************/

/* Intro:
We put display flex on the container which makes all elements within flex items */
.container {
  display:flex;
  border:10px solid goldenrod;
  min-height: 10rem;
}

/* Flex Direction:
flex-direction: row; = default.
Default main axis is left to right. And the cross axis is top to bottom.

flex-direction: column; = stacks vertically.
When this is set its main axis is top to bottom. And the cross axis is left to right!

flex-direction: row/column-reverse; Switches the axis' to the opposite.
*/
.container2 {
  display:flex;
  border:10px solid goldenrod;
  min-height:10rem;
  flex-direction: column;
}

/* Wrapping Elements:
flex-wrap: wrap; Browser tries to fill the items within the space you've allocated.
*/
.container3 {
  display:flex;
  border:10px solid goldenrod;
  min-height:10rem;
  flex-wrap:wrap;
}

.box-wrap {
  width:33.3333333%;
  /*padding and border are part of the box model and will work here if required.
  margin will NOT work as its not part of the box model. Could calc to -margin if needed*/
}

/* Ordering:
You can use 'order' with a number to change order.
order: 0; is default - can be changed, so if you set anything >0 it will shift behind the 0's
*/
.container4 {
  display:flex;
}

.box-or {
  flex:1; /*evenly distributes width*/
}

.box-or3 {
  order:1;
}

.box-or5 {
  order:2;
}

/* Alignment & Centering
justify-content: how the are items aligned on the main axis ~ default left-to-right
  flex-start is default
  flex-end will put at end
  center puts in center
  space-between will put first at start, last at end, and evenly distribute space inbetween
  space-around will add some space left and right too
  
  If you switch flex-direction to col instead of row, give it a height! then your justify-content still applies - just remember to change justification in accordance with axis direction!

align-items: 
  stretch is default, items will stretch top to bottom of container
  center will vertically center
  flex-start/end will start at the top/bottom
  baseline very good for aligning items of differing sizes
  
align-content:
  same properties as justify content only it deals with the cross axis ~ default top to bottom. In most use cases you'll need a flex-wrap:wrap;

align-self: 
can apply to individual item to position it and not the entire container to apply to all

*/
.container5 {
  display:flex;
  border:10px solid mistyrose;
  min-height:10rem;
  align-items:flex-start;
}

.box-ctr {
  width:33.333%;
}

.box2-ctr {
  padding-bottom: 200px;
}

.box6-ctr {
  padding-bottom: 0;
}

.box9-ctr {
  padding-bottom: 50px;
  align-self:stretch;
}
    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

  
    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  <!-- Intro -->
<h1>FLEXBOX.IO</h1>
<h2>Intro to flexbox</h2>
<div class="container">
  <div class="box box1">1</div>
  <div class="box box2">2</div>
  <div class="box box3">3</div>
  <div class="box box4">4</div>
  <div class="box box5">5</div>
  <div class="box box6">6</div>
  <div class="box box7">7</div>
  <div class="box box8">8</div>
  <div class="box box9">9</div>
  <div class="box box10">10</div>
</div>

<!-- Flex Direction -->
<h2>Flex Direction</h2>
<div class="container2">
  <div class="box-fd box1">1</div>
  <div class="box-fd box2">2</div>
  <div class="box-fd box3">3</div>
  <div class="box-fd box4">4</div>
  <div class="box-fd box5">5</div>
  <div class="box-fd box6">6</div>
  <div class="box-fd box7">7</div>
  <div class="box-fd box8">8</div>
  <div class="box-fd box9">9</div>
  <div class="box-fd box10">10</div>
</div>

<!-- Wrapping Elements -->
<h2>Wrapping Elements</h2>
<div class="container3">
  <div class="box-wrap box1">1</div>
  <div class="box-wrap box2">2</div>
  <div class="box-wrap box3">3</div>
  <div class="box-wrap box4">4</div>
  <div class="box-wrap box5">5</div>
  <div class="box-wrap box6">6</div>
  <div class="box-wrap box7">7</div>
  <div class="box-wrap box8">8</div>
  <div class="box-wrap box9">9</div>
  <div class="box-wrap box10">10</div>
</div>

<!-- Ordering -->
<h2>Ordering</h2>
<div class="container4">
  <div class="box-or box1">1</div>
  <div class="box-or box2">2</div>
  <div class="box-or box-or3">3</div>
  <div class="box-or box4">4</div>
  <div class="box-or box-or5">5</div>
  <div class="box-or box6">6</div>
  <div class="box-or box7">7</div>
  <div class="box-or box8">8</div>
  <div class="box-or box9">9</div>
  <div class="box-or box10">10</div>
</div>

<!-- Alignment & Centering -->
<h2>Alignment & Centering</h2>
<div class="container5">
  <div class="box-ctr box1">1</div>
  <div class="box-ctr box2-ctr">2</div>
  <div class="box-ctr box3">3</div>
  <div class="box-ctr box4">4</div>
  <div class="box-ctr box5">5</div>
  <div class="box-ctr box6-ctr">6</div>
  <div class="box-ctr box7">7</div>
  <div class="box-ctr box8">8</div>
  <div class="box-ctr box9-ctr">9</div>
  <div class="box-ctr box10">10</div>
</div>
  
  
  
    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
