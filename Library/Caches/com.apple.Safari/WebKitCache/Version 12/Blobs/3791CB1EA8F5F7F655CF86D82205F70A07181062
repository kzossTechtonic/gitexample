
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - Flexbox Cards</title>
  <link href='https://fonts.googleapis.com/css?family=Jaldi|Roboto+Condensed' rel='stylesheet' type='text/css'>
<meta name="viewport" content="width=device-width, initial-scale=1">
  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">

  <link rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.3/animate.min.css'>

      <style>
      .container {
  max-width: 1100px;
  margin: 0 auto;
}

.cards {
  display: -webkit-flex;
  display: flex;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-top: 15px;
  padding: 1.5%;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.card {
  position: relative;
  margin-bottom: 20px;
  padding-bottom: 30px;
  background: #fefff9;
  color: #363636;
  text-decoration: none;
  -moz-box-shadow: rgba(0, 0, 0, 0.19) 0 0 8px 0;
  -webkit-box-shadow: rgba(0, 0, 0, 0.19) 0 0 8px 0;
  box-shadow: rgba(0, 0, 0, 0.19) 0 0 8px 0;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
  border-radius: 4px;
}
@media (max-width: 700px) {
  .card {
    width: 100%;
  }
}
@media (min-width: 700px) {
  .card {
    max-width: 320px;
    margin-right: 20px;
    margin-bottom: 20px;
  }
  .card:nth-child(even) {
    margin-right: 0;
  }
}
@media (min-width: 980px) {
  .card:nth-child(even) {
    margin-right: 20px;
  }
  .card:nth-child(3n) {
    margin-right: 0;
  }
}
.card span {
  display: block;
}
.card .card-summary {
  padding: 5% 5% 3% 5%;
}
.card .card-header {
  position: relative;
  height: 175px;
  overflow: hidden;
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  background-color: rgba(255, 255, 255, 0.15);
  background-blend-mode: overlay;
  -moz-border-radius: 4px 4px 0 0;
  -webkit-border-radius: 4px;
  border-radius: 4px 4px 0 0;
}
.card .card-header:hover, .card .card-header:focus {
  background-color: rgba(255, 255, 255, 0);
}
.card .card-title {
  background: rgba(157, 187, 63, 0.85);
  padding: 3.5% 0 2.5% 0;
  color: white;
  font-family: 'Roboto Condensed', sans-serif;
  text-transform: uppercase;
  position: absolute;
  bottom: 0;
  width: 100%;
}
.card .card-title h3 {
  font-size: 1.2em;
  line-height: 1.2;
  padding: 0 3.5%;
  margin: 0;
}
.card .card-meta {
  max-height: 0;
  overflow: hidden;
  color: #666;
  font-size: .78em;
  text-transform: uppercase;
  position: absolute;
  bottom: 5%;
  padding: 0 5%;
  -moz-transition-property: max-height;
  -o-transition-property: max-height;
  -webkit-transition-property: max-height;
  transition-property: max-height;
  -moz-transition-duration: 0.4s;
  -o-transition-duration: 0.4s;
  -webkit-transition-duration: 0.4s;
  transition-duration: 0.4s;
  -moz-transition-timing-function: ease-in-out;
  -o-transition-timing-function: ease-in-out;
  -webkit-transition-timing-function: ease-in-out;
  transition-timing-function: ease-in-out;
}
.card:hover, .card:focus {
  background: white;
  -moz-box-shadow: rgba(0, 0, 0, 0.45) 0px 0px 20px 0px;
  -webkit-box-shadow: rgba(0, 0, 0, 0.45) 0px 0px 20px 0px;
  box-shadow: rgba(0, 0, 0, 0.45) 0px 0px 20px 0px;
}
.card:hover .card-title, .card:focus .card-title {
  background: rgba(157, 187, 63, 0.95);
}
.card:hover .card-meta, .card:focus .card-meta {
  max-height: 1em;
}

img {
  max-width: 100%;
}

body {
  background: #f0f0f0;
  font-size: 17px;
  line-height: 1.4;
  font-family: 'Jaldi', sans-serif;
}

* {
  -moz-transition-property: background-color, border-color, box-shadow, color, opacity, text-shadow, -moz-transform;
  -o-transition-property: background-color, border-color, box-shadow, color, opacity, text-shadow, -o-transform;
  -webkit-transition-property: background-color, border-color, box-shadow, color, opacity, text-shadow, -webkit-transform;
  transition-property: background-color, border-color, box-shadow, color, opacity, text-shadow, transform;
  -moz-transition-duration: 0.2s;
  -o-transition-duration: 0.2s;
  -webkit-transition-duration: 0.2s;
  transition-duration: 0.2s;
  -moz-transition-timing-function: linear;
  -o-transition-timing-function: linear;
  -webkit-transition-timing-function: linear;
  transition-timing-function: linear;
}

    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"></script>

    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  <div class="container">
	<div class="cards">
		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/200/animals);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				A summary will also be present. Usually two to three brief sentences about the content on the detail page.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>

		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/640/480/nature);">
				<span class="card-title">
					<h3>This is a title for a card that is a bit longer in length</h3>
				</span>
			</span>
			<span class="card-summary">
				Each card is created from an &lt;a&gt; tag so the whole card is linked.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>
		
		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/400/people)">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				Using Flexbox is such a an easy, well supported way for grid-style content, such as cards. The cards height will expand to match the longest item.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>

		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/200/tech);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				A summary will also be present. Usually two to three brief sentences about the content on the detail page.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>
		
		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/200/people);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				Each card is created from an &lt;a&gt; tag so the whole card is linked.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>
		
		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/250/nature);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				Using Flexbox is such a an easy, well supported way for grid-style content, such as cards. The cards height will expand to match the longest item.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>

		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/250/animals);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				A summary will also be present. Usually two to three brief sentences about the content on the detail page.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>

		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/600/600/people);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				Each card is created from an &lt;a&gt; tag so the whole card is linked.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>

		<a class="card" href="#">
			<span class="card-header" style="background-image: url(http://placeimg.com/400/400/tech);">
				<span class="card-title">
					<h3>This is a title for a card</h3>
				</span>
			</span>
			<span class="card-summary">
				Using Flexbox is such a an easy, well supported way for grid-style content, such as cards. The cards height will expand to match the longest item.
			</span>
			<span class="card-meta">
				Published: June 18th, 2015
			</span>
		</a>
	</div>
</div>
  
  <script src='//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

  
    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
