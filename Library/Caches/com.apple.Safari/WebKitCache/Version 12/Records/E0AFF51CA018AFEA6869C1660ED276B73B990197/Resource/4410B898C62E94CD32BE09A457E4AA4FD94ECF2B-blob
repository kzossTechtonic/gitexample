
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - Flexbox CSS demostration</title>
  
  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">

  <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css'>

      <style>
      .section {
  margin: auto;
  max-width: 72em;
}
.navbar .column a {
  vertical-align: middle;
  padding: 1em 2em;
}
.hidden {
  visibility: hidden;
}
html,
body,
body div,
span,
h1,
h2,
h3,
p,
pre,
code,
em,
strong,
ol,
ul,
li,
figure,
nav,
section,
form {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font-weight: normal;
  vertical-align: baseline;
  background: transparent;
}
figure,
nav,
section {
  display: block;
}
html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
html {
  overflow-y: scroll;
}
ul {
  list-style: none;
}
a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}
pre {
  white-space: pre;
  white-space: pre-wrap;
  white-space: pre-line;
  word-wrap: break-word;
}
strong {
  font-weight: bold;
}
pre,
code {
  font-family: monospace, sans-serif;
}
html {
  background-color: #f5f7fa;
  font-size: 14px;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  min-width: 300px;
  overflow-x: hidden;
  overflow-y: scroll;
  text-rendering: optimizeLegibility;
}
figure,
section {
  display: block;
}
body {
  font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}
code,
pre {
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: auto;
  font-family: "Source Code Pro", "Monaco", "Inconsolata", monospace;
  line-height: 1.25;
}
body {
  color: #69707a;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.42857143;
}
a {
  color: #1fc8db;
  cursor: pointer;
  text-decoration: none;
  -webkit-transition: none 86ms ease-out;
  transition: none 86ms ease-out;
}
a:hover {
  color: #222324;
}
code {
  background-color: #f5f7fa;
  color: #ed6c63;
  font-size: 12px;
  font-weight: normal;
  padding: 1px 2px 2px;
}
hr {
  border-top-color: #d3d6db;
  margin: 40px 0;
}
span {
  font-style: inherit;
  font-weight: inherit;
}
strong {
  color: #222324;
  font-weight: 700;
}
pre {
  background-color: #f5f7fa;
  color: #69707a;
  white-space: pre;
  word-wrap: normal;
}
pre code {
  background-color: #f5f7fa;
  color: #69707a;
  display: block;
  overflow-x: auto;
  padding: 16px 20px;
}
.content:not(:last-child),
.title:not(:last-child),
.subtitle:not(:last-child),
.highlight:not(:last-child) {
  margin-bottom: 20px;
}
.container {
  position: relative;
}
@media screen and (min-width: 980px) {
  .container {
    margin: 0 auto;
    max-width: 960px;
  }
}
@media screen and (min-width: 1180px) {
  .container {
    max-width: 1200px;
  }
}
.has-text-centered {
  text-align: center;
}
.content li + li {
  margin-top: 0.25em;
}
.content p:not(:last-child),
.content ul:not(:last-child) {
  margin-bottom: 1em;
}
.content ol {
  list-style: decimal outside;
  margin-left: 2em;
  margin-right: 2em;
  margin-top: 1em;
}
.content ul {
  list-style: disc outside;
  margin-left: 2em;
  margin-right: 2em;
  margin-top: 1em;
}
.notification {
  background-color: #f5f7fa;
  border-radius: 3px;
  padding: 16px 20px;
  position: relative;
}
.notification:after {
  clear: both;
  content: " ";
  display: table;
}
.notification.is-info {
  background-color: #42afe3;
  color: #fff;
}
.notification.is-success {
  background-color: #97cd76;
  color: #fff;
}
.notification.is-warning {
  background-color: #fce473;
  color: rgba(17, 17, 17, 0.5);
}
.notification.is-danger {
  background-color: #ed6c63;
  color: #fff;
}
.is-centered {
  display: flex;
  align-items: center;
  justify-content: center;
}
.title,
.subtitle {
  font-weight: 300;
  word-break: break-word;
}
.title {
  color: #222324;
  font-size: 28px;
  line-height: 1;
}
.title + .subtitle {
  margin-top: -10px;
}
@media screen and (min-width: 769px) {
  .title + .subtitle {
    margin-top: -15px;
  }
}
.subtitle {
  color: #69707a;
  font-size: 18px;
  line-height: 1.125;
}
.highlight {
  font-size: 12px;
  font-weight: normal;
  max-width: 100%;
  overflow: hidden;
  padding: 0;
}
.highlight pre {
  overflow: auto;
  max-width: 100%;
}
.column {
  -ms-flex-preferred-size: 0;
  flex-basis: 0;
  -webkit-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  -ms-flex-negative: 1;
  flex-shrink: 1;
  padding: 10px;
}
@media screen and (min-width: 769px) {
  .column.is-half {
    -webkit-box-flex: 0;
    -ms-flex: none;
    flex: none;
    width: 50%;
  }
  .column.is-2 {
    -webkit-box-flex: 0;
    -ms-flex: none;
    flex: none;
    width: 16.66667%;
  }
}
.columns {
  margin-left: -10px;
  margin-right: -10px;
  margin-top: -10px;
}
.columns:last-child {
  margin-bottom: -10px;
}
.columns:not(:last-child) {
  margin-bottom: 10px;
}
@media screen and (min-width: 769px) {
  .columns:not(.is-desktop) {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
}
.highlight {
  background-color: #fdf6e3;
  color: #586e75;
}
.highlight .s {
  color: #2aa198;
}
.highlight .na {
  color: #b58900;
}
.highlight .nt {
  color: #268bd2;
}
@media screen and (max-width: 768px) {
  .level-item:not(: last-child) {
    margin-bottom: 10px;
  }
}
@media screen and (min-width: 769px) {
  .pagination > a:not(: first-child) {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1;
  }
}
.section {
  background-color: #fff;
  padding: 40px 20px;
}
.shadowed {
  box-shadow: 0 20px 40px -20px #333;
}
.highlight {
  position: relative;
}
form {
  font-family: 'Open Sans Condensed', arial, sans;
  background: #FFFFFF;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);
}
form h2 {
  background: #4D4D4D;
  text-transform: uppercase;
  font-family: 'Open Sans Condensed', sans-serif;
  color: #797979;
  font-size: 18px;
  font-weight: 100;
  padding: 20px;
  margin: -30px -30px 30px -30px;
}
form input[type="text"],
form input[type="date"],
form input[type="datetime"],
form input[type="datetime-local"],
form input[type="email"],
form input[type="number"],
form input[type="tel"],
form input[type="search"],
form input[type="time"],
form input[type="url"],
form input[type="password"],
form textarea,
form select {
  box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  outline: none;
  display: block;
  width: 100%;
  padding: 7px;
  border: none;
  border-bottom: 1px solid #ddd;
  background: transparent;
  margin-bottom: 10px;
  font: 16px Arial, Helvetica, sans-serif;
  height: 45px;
}
form input[type="datetime-local"] {
  width: inherit;
}
form textarea {
  resize: none;
  overflow: hidden;
}
form input[type="button"],
form input[type="submit"],
form button {
  -moz-box-shadow: inset 0px 1px 0px 0px #45D6D6;
  -webkit-box-shadow: inset 0px 1px 0px 0px #45D6D6;
  box-shadow: inset 0px 1px 0px 0px #45D6D6;
  background-color: #2CBBBB;
  border: 1px solid #27A0A0;
  display: inline-block;
  cursor: pointer;
  color: #FFFFFF;
  font-family: 'Open Sans Condensed', sans-serif;
  font-size: 14px;
  padding: 8px 18px;
  text-decoration: none;
  text-transform: uppercase;
}
form input[type="button"]:hover,
form botton:hover,
form input[type="submit"]:hover {
  background: linear-gradient(to bottom, #34CACA 5%, #30C9C9 100%);
  background-color: #34CACA;
}

    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"></script>

    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  <section class="section">
  <div class="container ">
    <nav class="navbar columns">
      <p class="column has-text-centered">
        <a class="link is-info" href="#grid">Grid</a>
      </p>
      <p class="column has-text-centered">
        <a class="link is-info" href="#sizes">Sizes</a>
      </p>
      <p class="column has-text-centered">
        <img class="shadowed" src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/170881/Logo.png" style="max-height:90px; margin: -10px 0;     border-radius: 6px;">
      </p>
      <p class="column has-text-centered">
        <a class="link is-info" href="#hides">Hides</a>
      </p>
      <p class="column has-text-centered">
        <a class="link is-info" href="#forms">Forms</a>
      </p>
    </nav>
</section>
</div>
<section class="section">
  <div class="container">
    <h1 id="grid" class="title">Grid</h1>
    <h2 class="subtitle">A simple way to build columns</h2>
    <hr>
    <div class="content">
      <p>To build a <strong>grid</strong>, just:</p>
      <ol>
        <li>Add a <code>columns</code> container</li>
        <li>Add as many <code>column</code> elements as you want</li>
      </ol>
    </div>
    <div class="columns">
      <div class="column">
        <p class="notification is-info">First column</p>
      </div>
      <div class="column">
        <p class="notification is-success shadowed">Second column</p>
      </div>
      <div class="column">
        <p class="notification is-warning">Third column</p>
      </div>
      <div class="column">
        <p class="notification is-danger">Fourth column</p>
      </div>
    </div>

    <figure class="highlight">
      <pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"columns"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"column"</span><span class="nt">&gt;</span>
    First column
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"column"</span><span class="nt">&gt;</span>
    Second column
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"column"</span><span class="nt">&gt;</span>
    Third column
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"column"</span><span class="nt">&gt;</span>
    Fourth column
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre>
    </figure>

    <hr>

    <h3 id="sizes" class="title">Sizes</h3>

    <div class="content">
      <p>If you want to change the <strong>size</strong> of a single column, you can use one the following classes:</p>
      <ul>
        <li>
          <code>is-half</code>
        </li>
        <li>
          <code>is-third</code>
        </li>
        <li>
          <code>is-quarter</code>
        </li>
      </ul>
      <p>The <em>other</em> columns will fill up the <strong>remaining</strong> space automatically.</p>
    </div>

    <div class="columns">
      <div class="column is-half">
        <p class="notification is-info">
          <code class="html">is-half</code>
        </p>
      </div>
      <div class="column">
        <p class="notification is-warning">Auto</p>
      </div>
      <div class="column">
        <p class="notification is-danger">Auto</p>
      </div>
    </div>

    <div class="columns">
      <div class="column is-third">
        <p class="notification is-info shadowed">
          <code class="html">is-third</code>
        </p>
      </div>
      <div class="column">
        <p class="notification is-success">Auto</p>
      </div>
      <div class="column">
        <p class="notification is-warning">Auto</p>
      </div>
    </div>

    <div class="columns">
      <div class="column is-quarter">
        <p class="notification is-info">
          <code class="html">is-quarter</code>
        </p>
      </div>
      <div class="column">
        <p class="notification is-success">Auto</p>
      </div>
    </div>

    <h3 class="title">12 columns</h3>

    <div class="columns">
      <div class="column is-2">
        <p class="notification is-info"><code>is-2</code></p>
      </div>
      <div class="column">
        <p class="notification is-warning is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-success is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-warning is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-success is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-warning is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-success is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-warning is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-success is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-warning is-centered">1</p>
      </div>
      <div class="column">
        <p class="notification is-success is-centered">1</p>
      </div>
    </div>

    <hr>

    <h3 id="hides" class="title"> Hidden Example </h3>
    <div class="columns">
      <div class="column">
        <p class="notification is-info">First column</p>
      </div>
      <div class="column hidden">
        <p class="notification is-success">Second column</p>
      </div>
      <div class="column">
        <p class="notification is-warning">Third column</p>
      </div>
    </div>

    <hr>

    <h3 id="forms" class="title"> Form Example </h3>
    <div class="columns">
      <div class="column">
          <form method="get" action="/html/codes/html_form_handler.cfm" class="notification is-info">
            <p>
              <label>Name
      <input type="text" name="customer_name" required>
    </label>
            </p>

            <p>
              <label>Phone 
      <input type="tel" name="phone_number">
    </label>
            </p>

            <p>
              <label>Email 
      <input type="email" name="email_address">
    </label>
            </p>

            <fieldset>
              <legend>Which taxi do you require?</legend>
              <p><label> <input type="radio" name="taxi" required value="car"> Car </label></p>
              <p><label> <input type="radio" name="taxi" required value="van"> Van </label></p>
              <p><label> <input type="radio" name="taxi" required value="tuktuk"> Tuk Tuk </label></p>
            </fieldset>

            <fieldset>
              <legend>Extras</legend>
              <p><label> <input type="checkbox" name="extras" value="baby"> Baby Seat </label></p>
              <p><label> <input type="checkbox" name="extras" value="wheelchair"> Wheelchair Access </label></p>
              <p><label> <input type="checkbox" name="extras" value="tip"> Stock Tip </label></p>
            </fieldset>

            <p>
              <label>Pickup Date/Time
      <input type="datetime-local" name="pickup_time" required>
    </label>
            </p>

            <p>
              <label>Pickup Place
      <select id="pickup_place" name="pickup_place">
        <option value="" selected="selected">Select One</option>
        <option value="office" >Taxi Office</option>
        <option value="town_hall" >Town Hall</option>
        <option value="telepathy" >We'll Guess!</option>
      </select>
    </label>
            </p>

            <p>
              <label>Dropoff Place
      <input type="text" name="dropoff_place" required list="destinations">
    </label>

              <datalist id="destinations">
      <option value="Airport">
      <option value="Beach">
      <option value="Fred Flinstone's House">
    </datalist>
            </p>

            <p>
              <label>Special Instructions
      <textarea name="comments" maxlength="500"></textarea>
    </label>
            </p>

            <p><button>Submit Booking</button></p>

          </form>
      </div>
      <div class="column hidden">
        <p class="notification is-success">Second column</p>
      </div>
      <div class="column">
        <p class="notification is-warning">Third column</p>
      </div>
    </div>
  </div>
  
  
  
    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
