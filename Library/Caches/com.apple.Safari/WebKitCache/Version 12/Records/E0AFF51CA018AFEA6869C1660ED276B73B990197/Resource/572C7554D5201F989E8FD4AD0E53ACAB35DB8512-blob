
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - css grid with flexbox, attempt 3</title>
  
  
  
  
      <style>
      html, body, p, h1, h2, h3, h4, h5, h6, div, span, table, td, th, thead, tr {
  margin: 0;
  padding: 0;
}

html {
  font-size: 16px;
}

* {
  box-sizing: border-box;
}

.l-content-max-width {
  max-width: 76rem;
  margin: 0 auto;
}

.l-grid, .l-grid--gutter {
  display: block;
  flex-flow: row wrap;
  margin-left: 0;
}

.l-grid-wrapper {
  background: #efefef;
}

.l-grid-row-spacer--1rem {
  margin-top: -1rem;
  margin-bottom: 1rem;
}

.l-grid-row-spacer--1rem > [class*="l-grid__col"] {
  padding-top: 1rem;
}

.l-grid-row-spacer--2rem {
  margin-top: -2rem;
  margin-bottom: 2rem;
}

.l-grid-row-spacer--2rem > [class*="l-grid__col"] {
  padding-top: 2rem;
}

.l-grid > [class*="l-grid__col"] {
  flex: 1;
  padding-left: 0;
  min-width: 100%;
}

.l-grid--gutter {
  margin-left: -1rem;
}

.l-grid--gutter > [class*="l-grid__col"] {
  flex: 1;
  padding-left: 1rem;
  min-width: 100%;
}

.l-grid__col--1of5 {
  max-width: 20%;
}

.l-grid__col--2of5 {
  max-width: 40%;
}

.l-grid__col--3of5 {
  max-width: 60%;
}

.l-grid__col--4of5 {
  max-width: 80%;
}

.l-grid__col--1of4 {
  max-width: 25%;
}

.l-grid__col--2of4 {
  max-width: 50%;
}

.l-grid__col--3of4 {
  max-width: 75%;
}

.l-grid__col--1of3 {
  max-width: 33.3333%;
}

.l-grid__col--2of3 {
  max-width: 66.6666%;
}

.l-grid__col--1of2 {
  max-width: 50%;
}

.l-grid__col--1of1 {
  max-width: 100%;
}

.l-grid__col--1col {
  max-width: 8.3333%;
}

.l-grid__col--2col {
  max-width: 16.6666%;
}

.l-grid__col--3col {
  max-width: 25%;
}

.l-grid__col--4col {
  max-width: 33.3333%;
}

.l-grid__col--5col {
  max-width: 41.6666%;
}

.l-grid__col--6col {
  max-width: 50%;
}

.l-grid__col--7col {
  max-width: 58.3333%;
}

.l-grid__col--8col {
  max-width: 66.6666%;
}

.l-grid__col--9col {
  max-width: 75%;
}

.l-grid__col--10col {
  max-width: 83.3333%;
}

.l-grid__col--11col {
  max-width: 91.6666%;
}

.l-grid__col--12col {
  max-width: 100%;
}

.l-grid__col--1col-fixed {
  max-width: 72px;
}

.l-grid__col--2col-fixed {
  max-width: 16.6666%;
}

.l-grid__col--3col-fixed {
  max-width: 25%;
}

.l-grid__col--4col-fixed {
  max-width: 33.3333%;
}

.l-grid__col--5col-fixed {
  max-width: 41.6666%;
}

.l-grid__col--6col-fixed {
  max-width: 50%;
}

.l-grid__col--7col-fixed {
  max-width: 58.3333%;
}

.l-grid__col--8col-fixed {
  max-width: 66.6666%;
}

.l-grid__col--9col-fixed {
  max-width: 75%;
}

.l-grid__col--10co-fixedl {
  max-width: 83.3333%;
}

.l-grid__col--11co-fixedl {
  max-width: 91.6666%;
}

.l-grid__col--12co-fixedl {
  max-width: 100%;
}

.l-grid__content {
  border: 1px solid orange;
  height: 4rem;
  border-radius: 5px;
  min-width: 100%;
}

@media screen and (min-width: 768px) {
  .l-grid, .l-grid--gutter {
    display: flex;
  }

  .l-grid > [class*="l-grid__col"],
  .l-grid--gutter > [class*="l-grid__col"],
  .l-grid--gutter-md > [class*="l-grid__col"],
  .l-grid--gutter-lg > [class*="l-grid__col"],
  .l-grid--gutter-xl > [class*="l-grid__col"] {
    min-width: initial;
  }

  .l-grid--gutter-md {
    margin-top: -2rem;
    margin-left: -2rem;
    margin-bottom: 2rem;
  }

  .l-grid--gutter-md > [class*="l-grid__col"] {
    padding-top: 2rem;
  }

  .l-grid--gutter-md > [class*="l-grid__col"] {
    padding-top: 2rem;
    padding-left: 2rem;
  }
}
@media screen and (min-width: 992px) {
  .l-grid--gutter-lg {
    margin-top: -2rem;
    margin-left: -2rem;
    margin-bottom: 2rem;
  }

  .l-grid--gutter-lg > [class*="l-grid__col"] {
    padding-top: 2rem;
  }

  .l-grid--gutter-lg > [class*="l-grid__col"] {
    padding-top: 2rem;
    padding-left: 2rem;
  }
}
@media screen and (min-width: 1200px) {
  .l-grid--gutter-xl {
    margin-top: -2rem;
    margin-left: -2rem;
    margin-bottom: 2rem;
  }

  .l-grid--gutter-xl > [class*="l-grid__col"] {
    padding-top: 2rem;
  }

  .l-grid--gutter-xl > [class*="l-grid__col"] {
    padding-top: 2rem;
    padding-left: 2rem;
  }
}

    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

  
    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  <div class="l-content-max-width ">
  <div class="l-grid-wrapper">
    <div class="l-grid--gutter l-grid-row-spacer--2rem">
      <div class="l-grid__col--2of4">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--2of4">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--2rem">
      <div class="l-grid__col--1of4">
        <div class="l-grid__content">
        </div>
      </div>
      <div class="l-grid__col--3of4">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid l-grid-row-spacer--1rem">
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--2of3">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1of3">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
      <div class="l-grid__col--6col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--1col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--2col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--3col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--4col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--5col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--6col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--7col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--8col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--9col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--10col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--11col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter l-grid-row-spacer--1rem">
      <div class="l-grid__col--12col">
        <div class="l-grid__content"></div>
      </div>
    </div>
    <div class="l-grid--gutter">
      <div class="l-grid__col--1col-fixed">
        <div class="l-grid__content"></div>
      </div>
    </div>
  </div>
</div>
</div>
    <script src="//static.codepen.io/assets/common/stopExecutionOnTimeout-de7e2ef6bfefd24b79a3f68b414b87b8db5b08439cac3f1012092b2290c719cd.js"></script>

  
  

    <script >
      // inspiration
// https://github.com/philipwalton/solved-by-flexbox/blob/master/assets/css/components/grid.css
// https://css-tricks.com/child-and-sibling-selectors/
// https://css-tricks.com/dont-overthink-flexbox-grids/
// https://davidwalsh.name/flexbox-layouts
//https://codepen.io/irinakramer/pen/jcLlp
      //# sourceURL=pen.js
    </script>



    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
