
<!DOCTYPE html>
<html lang="en" >

<head>

  <meta charset="UTF-8">
  <link rel="shortcut icon" type="image/x-icon" href="https://static.codepen.io/assets/favicon/favicon-8ea04875e70c4b0bb41da869e81236e54394d63638a1ef12fa558a4a835f1164.ico" />
  <link rel="mask-icon" type="" href="https://static.codepen.io/assets/favicon/logo-pin-f2d2b6d2c61838f7e76325261b7195c27224080bc099486ddd6dccb469b8e8e6.svg" color="#111" />
  <title>CodePen - Flexbox Properties Demonstration</title>
  
  
  
  
      <style>
      .flexbox-parent {
  display: -webkit-flex;
  display: flex;
  background: #FFD54F;
  overflow: hidden;
  width: 100%;
  padding: 3px;
  min-height: 550px;
  max-height: 1000px;
}
.flexbox-parent > div {
  display: inline-block;
  background: white;
  overflow: hidden;
  margin: 3px;
  padding: 5px;
}
.flexbox-parent > div .child-controls {
  margin-top: 7px;
}

.child-number {
  display: block;
  width: 22px;
  height: 22px;
  background: #FFB300;
  color: white;
  font-size: 14px;
  font-weight: bold;
  padding-top: 3px;
  text-align: center;
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;
  border-radius: 50%;
  float: left;
}

.code {
  font-family: Consolas, "Courier New", Monospace;
  font-size: 15px;
}

.remove-child {
  background: transparent;
  color: #FF6F00;
  font-size: 14px;
  cursor: pointer;
}

.highlight {
  color: #FF8F00;
}

.pull-left {
  float: left;
}

.pull-right {
  float: right;
}

.clearfix:after {
  content: '';
  display: block;
  clear: both;
}

.right-padding {
  padding-right: 15px;
}

h3 {
  margin: 0 0 10px 0 !important;
}

p {
  margin: 0 0 10px 0 !important;
  line-height: 1.4em !important;
}

md-input-container {
  padding: 0 0 5px 0 !important;
}
md-input-container .md-input {
  padding: 0 !important;
  line-height: 1em !important;
}

md-select {
  margin-top: 0 !important;
}
md-select .md-select-label {
  padding-top: 2px !important;
  padding-bottom: 4px !important;
}

md-radio-button {
  margin: 5px 10px !important;
}

md-divider {
  margin: 10px 0 !important;
}

    </style>

  <script>
  window.console = window.console || function(t) {};
  window.open = function(){ console.log("window.open is disabled."); };
  window.print   = function(){ console.log("window.print is disabled."); };
  window.alert   = function(){ console.log("window.alert is disabled."); };
  window.confirm = function(){ console.log("window.confirm is disabled."); };
  window.prompt  = function(){ console.log("window.prompt is disabled."); };
  window.Notification = function() { console.log("HTML5 notifications are disabled."); };
</script>

  
    <script>
    (function() {
      /*
      * Capture all errors for this pen
      **/
      window.onerror = function(/* message, file, line */) {
        return true;
      };

      /*
      * Capture and kill Web Audio and Speech
      */
      if (typeof (AudioContext) != "undefined" || typeof (webkitAudioContext) != "undefined") {
        AudioContext = function() {
          return false;
        };

        webkitAudioContext = function() {
          return false;
        };
      }

      if (typeof (mozAudioContext) != "undefined") {
        mozAudioContext = function() {
          return false;
        };
      }

      if ("speechSynthesis" in window) {
        window.speechSynthesis = {};
      }
      if ("speak" in speechSynthesis) {
        speechSynthesis.speak = function() {
          return false;
        };
      }

      // Kill the browser asking for access to the video cam or audio
      navigator.getUserMedia = function() {
      };
      navigator.mozGetUserMedia = function() {
      };
      navigator.webkitGetUserMedia = function() {
      };
      navigator.mediaDevices.getUserMedia = function() {
      };

      
      /**
      * Capture and kill animations after X number of seconds
      **/
      var __animationDuration = 4000;
      var __animationsTimedOut = false;
      var __animationRequests = [];
      var __requestAnimationFrame = false;
      var __cancelAnimationFrame = false;
      var x, i;

      var vendorsReqestAnimationFrame = [
        "requestAnimationFrame",
        "mozRequestAnimationFrame",
        "webkitRequestAnimationFrame"
      ];

      // find the browsers requestAnimationFrame and cancelAnimationFrame
      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        if (!__requestAnimationFrame) {
          __requestAnimationFrame = window[vendorsReqestAnimationFrame[x]
          ];
        }
      }

      __cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

      // Wrap the requestAnimationFrame so we can stop it in the future
      function __reqFrame(callback, element) {
        // after the timeout we no longer take requests
        var timerID;
        if (__animationsTimedOut) {
          return 0;
        } else {
          timerID = __requestAnimationFrame(callback, element);
          __animationRequests.push(timerID);

          return timerID;
        }
      }

      for (x = 0; x < vendorsReqestAnimationFrame.length; x++) {
        window[vendorsReqestAnimationFrame[x]] = __reqFrame;
      }

      // Cancel the animations after expiration
      setTimeout(function() {
        for (i = 0; i < __animationRequests.length; i++) {
          __cancelAnimationFrame(__animationRequests[i]);
        }

        var ss = window.document.createElement("style");
        ss.textContent = "*, *::before, *::after { animation-play-state: paused !important; }";
        var ref = window.document.getElementsByTagName("script")[0];
        ref.parentNode.insertBefore(ss, ref);

        __animationsTimedOut = true;
      }, __animationDuration, "push");

      /**
      * Capture setInterval and setTimeout to kill after X number of seconds
      **/
      window.setInterval = (function(oldSetInterval) {
        var registered = [];

        function f(a,b) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore setIntervals
          if (this.timedOut) {
            return 0;
          } else {
            return registered[ registered.length ] = oldSetInterval(a,b);
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearInterval( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setInterval));

      window.setTimeout = (function(oldSetTimeout) {
        var registered = [];

        // because some of our timeouts may time out afterwards
        // we want to make sure they know the secret sauce to still use
        // setTimeout after the time has expired, thats why we have a
        // third param
        function f(a, b, push) {
          // check if the time has expired,
          // after __animationDuration expires don't take anymore requests
          if (this.timedOut && typeof(push) == "undefined") {
            return 0;
          } else {
            // If push is there, never clear that interval
            // so never add it to the registry
            if (push) {
              return oldSetTimeout(a,b);
            } else {
              return registered[ registered.length ] = oldSetTimeout(a,b);
            }
          }
        }

        f.clearAll = function() {
          var r;

          while (r = registered.pop()) {
            clearTimeout( r );
          }

          this.timedOut = true;
        };

        f.timedOut = false;

        return f;
      }(window.setTimeout));

      setTimeout(function() {

        setTimeout.clearAll();
        setInterval.clearAll();

        // Stop Web Animations API
        // Idea from Gregor: https://github.com/CodePen/CodePen-Bug-Reporting-Only/issues/173#issuecomment-203443301
        // Status as of August 2016:
        //  Chrome = stops animations
        //  Safari = doesn't support anyway
        //  Firefox = doesn't stop them, but probably will someday? Doesn't error
        if (document.timeline && typeof document.timeline.getAnimations === "function") {
          document.timeline.getAnimations().map(function(animation) {
            animation.pause();
          });
        }
    
      }, __animationDuration, "push");

    }());
  </script>

  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


</head>

<body translate="no"  onload="_l='t';">

  <!-- tell angular this is flexboxDemoApp -->
<html lang="en" ng-app="flexboxDemoApp">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>CSS3 Flexbox Playground</title>
    <!-- Angulars Material CSS -->
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/0.8.3/angular-material.min.css">
    <!-- include our compiled CSS -->
    <link href="css/style.css" rel="stylesheet">
  </head>
  <!-- this will be the only controller AppCtrl -->
  <body ng-controller="AppCtrl">
    <!-- Here's the main container -->
    <md-content class="md-padding">
      <div layout-gt-md="row" layout="column">
        <div flex-gt-md="66" flex="100" class="right-padding">
          <h3>Children Width</h3>
          <div layout="row" layout-align="center center" class="code">
            <div flex="15">width: {{children_width}}%</div>
            <md-slider flex min="0" max="100" ng-model="children_width" aria-label="width"></md-slider>
          </div>

          <md-divider></md-divider>

          <h3>Parent Flex Properties &ndash; <span class="highlight">flex container</span></h3>
          <div layout="column" layout-gt-md="row" class="code">
            <div layout="row">
              <div flex>
                <strong>flex-direction</strong>
                <md-radio-group ng-model="parent.flexDirection">
                  <md-radio-button value="row" class="highlight">row</md-radio-button>
                  <md-radio-button value="row-reverse">row-reverse</md-radio-button>
                  <md-radio-button value="column">column</md-radio-button>
                  <md-radio-button value="column-reverse">column-reverse</md-radio-button>
                </md-radio-group>
              </div>
              
              <div flex>
                <strong>flex-wrap</strong>
                <md-radio-group ng-model="parent.flexWrap">
                  <md-radio-button value="nowrap" class="highlight">nowrap</md-radio-button>
                  <md-radio-button value="wrap">wrap</md-radio-button>
                  <md-radio-button value="wrap-reverse">wrap-reverse</md-radio-button>
                </md-radio-group>
              </div>
            </div>

            <div layout="row">
              <div flex>
                <strong>justify-content</strong>
                <md-radio-group ng-model="parent.justifyContent">
                  <md-radio-button value="flex-start" class="highlight">flex-start</md-radio-button>
                  <md-radio-button value="flex-end">flex-end</md-radio-button>
                  <md-radio-button value="center">center</md-radio-button>
                  <md-radio-button value="space-between">space-between</md-radio-button>
                  <md-radio-button value="space-around">space-around</md-radio-button>
                </md-radio-group>
              </div>

              <div flex>
                <strong>align-items</strong>
                <md-radio-group ng-model="parent.alignItems">
                  <md-radio-button value="stretch" class="highlight">stretch</md-radio-button>
                  <md-radio-button value="flex-start">flex-start</md-radio-button>
                  <md-radio-button value="flex-end">flex-end</md-radio-button>
                  <md-radio-button value="center">center</md-radio-button>
                  <md-radio-button value="baseline">baseline</md-radio-button>
                </md-radio-group>
              </div>
            </div>

            <div layout="row">
              <div flex>
                <strong>align-content</strong>
                <md-radio-group ng-model="parent.alignContent">
                  <md-radio-button value="stretch" class="highlight">stretch</md-radio-button>
                  <md-radio-button value="flex-start">flex-start</md-radio-button>
                  <md-radio-button value="flex-end">flex-end</md-radio-button>
                  <md-radio-button value="center">center</md-radio-button>
                  <md-radio-button value="space-between">space-between</md-radio-button>
                  <md-radio-button value="space-around">space-around</md-radio-button>
                </md-radio-group>
              </div>
            </div>
          </div>

          <small>* The default property values are <span class="highlight">highlighed</span>.</small>

          <md-divider></md-divider>

          <h3>Children Flex Properties &ndash; <span class="highlight">flex items</span></h3>

          <div>
            <p>The children flex properties can be applied at child level, separate for each child. See the results section and change some of their properties. Hover with the mouse pointer or touch the fields to see the property name.</p>
          </div>

          <md-divider hide show-sm show-md></md-divider>
        </div>

        <div flex>
          <h3 class="pull-left">Result</h3>
          <p class="pull-right">
            <md-button class="md-accent md-raised" ng-click="addChild()">Add child</md-button>
          </p>

          <div class="clearfix"></div>

          <div
            class="flexbox-parent" 
            ng-attr-style="
              -webkit-flex-direction:  {{parent.flexDirection}};
              flex-direction:          {{parent.flexDirection}};

              -webkit-flex-wrap:       {{parent.flexWrap}};
              flex-wrap:               {{parent.flexWrap}};

              -webkit-justify-content: {{parent.justifyContent}};
              justify-content:         {{parent.justifyContent}};

              -webkit-align-items:     {{parent.alignItems}};
              align-items:             {{parent.alignItems}};

              -webkit-align-content:   {{parent.alignContent}};
              align-content:           {{parent.alignContent}};
              "
          >
            <div 
              class="code md-whiteframe-z1"
              ng-repeat="child in children"
              ng-attr-style="
                width:               {{children_width}}%;

                -webkit-order:       {{child.order}};
                order:               {{child.order}};

                -webkit-flex-grow:   {{child.flexGrow}};
                flex-grow:           {{child.flexGrow}};

                -webkit-flex-shrink: {{child.flexShrink}};
                flex-shrink:         {{child.flexShrink}};

                -webkit-flex-basis:  {{child.flexBasis}};
                flex-basis:          {{child.flexBasis}};

                -webkit-align-self:  {{child.alignSelf}};
                align-self:          {{child.alignSelf}};

              "
            >
              <div class="clearfix">
                <span class="child-number" aria-label="Number">{{$index + 1}}</span>
                <span class="remove-child pull-right" ng-click="removeChild($index)" title="Remove">
                  &#x2716;
                </span>
              </div>

              <div class="child-controls">
                <md-input-container>
                  <md-tooltip md-direction="top">order</md-tooltip>
                  <input type="number" ng-model="children[$index].order">
                </md-input-container>

                <md-input-container>
                  <md-tooltip md-direction="top">flex-grow</md-tooltip>
                  <input type="number" ng-model="children[$index].flexGrow">
                </md-input-container>

                <md-input-container>
                  <md-tooltip md-direction="top">flex-shrink</md-tooltip>
                  <input type="number" ng-model="children[$index].flexShrink">
                </md-input-container>

                <md-input-container>
                  <md-tooltip md-direction="top">flex-basis</md-tooltip>
                  <input type="text" ng-model="children[$index].flexBasis">
                </md-input-container>

                <md-input-container>
                  <md-tooltip md-direction="top">align-self</md-tooltip>
                  <md-select ng-model="children[$index].alignSelf">
                    <md-option ng-value="value" ng-repeat="value in ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch']">{{value}}</md-option>
                  </md-select>
                </md-input-container>
              </div>
                
            </div>
          </div>
        </div>
      </div>
    </md-content>
    
    <!-- AngularJS -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.6/angular-animate.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.6/angular-aria.min.js"></script>

    <!-- Angular Material JavaScript -->
    <script src="https://ajax.googleapis.com/ajax/libs/angular_material/0.8.3/angular-material.min.js"></script>

    <!-- App.js -->
    <script src="js/app.js"></script>
  </body>
</html>
    <script src="//static.codepen.io/assets/common/stopExecutionOnTimeout-de7e2ef6bfefd24b79a3f68b414b87b8db5b08439cac3f1012092b2290c719cd.js"></script>

  
  

    <script >
      // Declare the flexboxDemoApp module and its dependency 'ngMaterial'
var app = angular.module('flexboxDemoApp', ['ngMaterial']);
// Declare the AppCtrl controller
app
.config(['$mdThemingProvider', function ($mdThemingProvider) {
  $mdThemingProvider
    .theme('default')
    .accentPalette('amber', {
      default: '700'
    });
}])
.controller('AppCtrl', ['$scope', function ($scope) {
  $scope.parent = {
    flexDirection:  'row',
    flexWrap:       'nowrap',
    justifyContent: 'flex-start',
    alignItems:     'stretch',
    alignContent:   'stretch'
  };

  $scope.children_width = 12; // %

  $scope.children  = [];

  var addChild = function (order, flexGrow, flexShrink, flexBasis, alignSelf) {
    $scope.children.push({
      order:      order      || 0,
      flexGrow:   flexGrow   || 0,
      flexShrink: flexShrink || 1,
      flexBasis:  flexBasis  || 'auto',
      alignSelf:  alignSelf  || 'auto'
    });
  };
  var removeChild = function (index) {
    $scope.children.splice(index, 1);
  };

  $scope.addChild    = addChild;
  $scope.removeChild = removeChild;

  for (var i = 0; i < 5; i++) {
    addChild();
  }
    
}]);
      //# sourceURL=pen.js
    </script>



    <script style="display: none !important;">
  (function() {
    var __animationDuration = 4000;

    setTimeout(function() {
      // If onload hasn't been called, stop all requests after 2 seconds
      if (typeof(_l) == "undefined") {
        if (window.stop !== undefined) window.stop();
        else if (document.execCommand !== undefined) document.execCommand("Stop", false);
      }
    }, 2000, "push");

    /*
    * Capture and kill CSS animations after X number of seconds
    */
    function pauseAnimations() {
      var body = document.getElementsByTagName("body")[0];

      if (body.addEventListener) {
        body.addEventListener("webkitAnimationStart", listener, false);
        body.addEventListener("webkitAnimationIteration", listener, false);
        body.addEventListener("animationstart", listener, false);
        body.addEventListener("animationiteration", listener, false);
      }
    }

    function listener(e) {

      var targetEl;

      if (e.type == "webkitAnimationStart" || e.type == "webkitAnimationIteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.webkitAnimationPlayState = "paused";
        }, __animationDuration, "push");

      } else if (e.type == "animationstart" || e.type == "animationiteration") {

        targetEl = e.target;

        setTimeout(function() {
          targetEl.style.MozAnimationPlayState = "paused";
        }, __animationDuration, 'push');

      }
    }

    pauseAnimations();

    // Pause all audio elements, allow the audio/video
    // elements to render before stopping them
    function pauseElementTypes(type) {
      for (var i = 0, els = document.getElementsByTagName(type); i < els.length; i++) {
        els[i].pause();
      }
    }

    // Wait until the elements have been created to pause them
    setTimeout(function() {
      pauseElementTypes("audio");
      pauseElementTypes("video");
    }, 100);

  }());
  </script>

  

  <script src="https://static.codepen.io/assets/editor/live/css_reload-5619dc0905a68b2e6298901de54f73cefe4e079f65a75406858d92924b4938bf.js"></script>
</body>

</html>
 
